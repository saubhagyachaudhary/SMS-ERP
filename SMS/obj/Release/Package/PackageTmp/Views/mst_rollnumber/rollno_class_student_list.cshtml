@model List<SMS.Models.mst_rollnumber>

@{
    ViewBag.Title = "rollno_class_student_list";
}
<div class="right_col" role="main">
    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="x_panel">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="x_title" style="overflow-x:auto;">
                    <h2>Mark Attendance</h2>
                    @using (Html.BeginForm("rollno_class_student_list", "mst_rollnumber", FormMethod.Post, new { id = "submit", onsubmit = "return validate()" }))
                    {
                        
                        <table class="table table-condensed table-striped table-bordered table-hover">
                            <thead>
                                <tr>
                                    <th>

                                        Admission Number
                                    </th>
                                   
                                    <th>

                                        Student Name
                                    </th>
                                    <th>

                                        Roll Number
                                    </th>



                                </tr>
                            </thead>
                            <tbody>
                                @for (int i = 0; i < Model.Count(); i++)
                                {
                                    <tr>

                                        <td>
                                            @Html.DisplayFor(model => model[i].sr_num)
                                            @Html.HiddenFor(model => model[i].sr_num)
                                            @Html.HiddenFor(model => model[i].class_id)
                                            @Html.HiddenFor(model => model[i].section_id)

                                        </td>
                                       
                                        <td>
                                            @Html.DisplayFor(model => model[i].std_name)
                                            @Html.HiddenFor(model => model[i].std_name)
                                        </td>
                                        <td>
                                            @Html.TextBoxFor(model => model[i].roll_number,new { @style = "text-align: center", @onchange = "OnChangeEvent(this)",@id = "roll"+i.ToString() })
                                           
                                        </td>
                                       
                                    </tr>
                                }
                            </tbody>
                        </table>
                       
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    <input type="submit" value="Update" class="btn btn-primary"/>


                                </div>
                     


                    }
                   
                </div>
               
            </div>
            <div>
                @Html.ActionLink("Back to List", "roll_class_list", "", new { @class = "btn btn-primary please_wait" })
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">



    function validate()
    {
        for (i = 0; i < @Model.Count() ; i++)
        {
            var input = document.getElementById("roll"+i.toString()).value;

            if(input.trim() == '')
            {
               
                alert("Roll number cannot be blank");
               
                return false;
               
            } 
        }

        for (i = 0; i < @Model.Count() ; i++)
        {
            var val = document.getElementById("roll"+i.toString());

            for (j = 0; j < @Model.Count() ; j++)
            {
                var vall = document.getElementById("roll"+j.toString());
                if(val.id != vall.id)
                {
                    if(val.value == vall.value)
                    {
                       
                        alert("Roll number must be unique");
                        val.focus();
                        return false;
                        
                    }
                }
            }
        }

        return confirm('Are you sure you want to update roll number?')
    }

    function OnChangeEvent(obj) {

            
        
        if(obj.value == "")
        {
            var input = document.getElementById(obj.id);
            alert("Roll number cannot be blank");
            input.value = "";
            input.focus();
            flag = 1;
        } 

            if(isNaN(obj.value))
            {
                var input = document.getElementById(obj.id);
                alert("Roll number must be number");
                input.value = "";
                input.focus();
                
            }
       
        
        for (i = 0; i < @Model.Count() ; i++)
        {
            var val = document.getElementById("roll"+i.toString()).value;

            if(obj.id != "roll"+i.toString())
            {
                if(val == obj.value)
                {
                    var input = document.getElementById(obj.id);
                    alert("Roll number must be unique");
                    input.focus();
                    break;
                }
            }
        }
    
 }
</script>