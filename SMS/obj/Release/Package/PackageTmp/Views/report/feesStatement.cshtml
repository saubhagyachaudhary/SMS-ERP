@model SMS.Models.repFeesStatement

@{
    ViewBag.Title = "feesStatement";

    List<SelectListItem> mode = new List<SelectListItem>();
    mode.Add(new SelectListItem
    {
        Value = "Both",
        Text = "Both Cash and Bank"
    });
    mode.Add(new SelectListItem
    {
        Value = "Cash",
        Text = "Cash"
    });
    mode.Add(new SelectListItem
    {
        Value = "Bank",
        Text = "Bank"
    });

    List<SelectListItem> detailed = new List<SelectListItem>();
    detailed.Add(new SelectListItem
    {
        Value = "Consolidated",
        Text = "Consolidated"
    });
    detailed.Add(new SelectListItem
    {
        Value = "Detailed",
        Text = "Detailed"
    });

    List<SelectListItem> format = new List<SelectListItem>();
    format.Add(new SelectListItem
    {
        Value = "Excel",
        Text = "Excel"        
    });
    format.Add(new SelectListItem
    {
        Value = "PDF",
        Text = "PDF"
    });
}
<link href="~/vendors/datetimepicker/jquery-ui.css" rel="stylesheet" />


<div class="right_col" role="main">
    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="x_panel">


                <h2>Download Fees Statement</h2>

                @using (Html.BeginForm("feesStatement", "report", FormMethod.Post, new { target = "_blank" }))
                {
                    @*@Html.AntiForgeryToken()*@

                    <div class="form-horizontal">

                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.LabelFor(model => model.fromDt, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                            <div class="col-md-10 col-xs-12 col-sm-10">
                                @Html.EditorFor(model => model.fromDt, new { htmlAttributes = new { id = "fromdt", @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.fromDt, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.toDt, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                            <div class="col-md-10 col-xs-12 col-sm-10">
                                @Html.EditorFor(model => model.toDt, new { htmlAttributes = new { id = "todt", @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.toDt, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.mode, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                            <div class="col-md-10 col-xs-12 col-sm-10">
                                @Html.DropDownListFor(model => model.mode, mode as IEnumerable<SelectListItem>, htmlAttributes: new {@class = "form-control" })
                                @Html.ValidationMessageFor(model => model.mode, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.detailed, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                            <div class="col-md-10 col-xs-12 col-sm-10">
                                @Html.DropDownListFor(model => model.detailed, detailed as IEnumerable<SelectListItem>, htmlAttributes: new {@class = "form-control" })
                                @Html.ValidationMessageFor(model => model.detailed, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.format, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                            <div class="col-md-10 col-xs-12 col-sm-10">
                                @Html.DropDownListFor(model => model.format, format as IEnumerable<SelectListItem>, htmlAttributes: new {@class = "form-control" })
                                @Html.ValidationMessageFor(model => model.format, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-sm-offset-2 col-md-10 col-sm-10">
                                <input type="submit" value="Display" class="btn btn-success" />
                            </div>
                        </div>
                    </div>
                }

            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="~/vendors/datetimepicker/jquery-1.10.2.js"></script>
    <script src="~/vendors/datetimepicker/jquery-ui.js"></script>
    <script>
        $(function () {
            $("#fromdt").datepicker({
                dateFormat: 'dd/mm/yy',
                changeMonth: true,
                changeYear: true
            });

        });

        $(function () {
            $("#todt").datepicker({
                dateFormat: 'dd/mm/yy',
                changeMonth: true,
                changeYear: true,

            });

        });
    </script>



}