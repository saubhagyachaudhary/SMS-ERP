@model SMS.Models.sr_register

@{
    ViewBag.Title = "AddStudent";
    List<SelectListItem> category = new List<SelectListItem>();
    category.Add(new SelectListItem
    {
        Value = "General",
        Text = "General"
    });
    category.Add(new SelectListItem
    {
        Value = "SC",
        Text = "SC"
    });
    category.Add(new SelectListItem
    {
        Value = "ST",
        Text = "ST"
    });
    category.Add(new SelectListItem
    {
        Value = "OBC",
        Text = "OBC"
    });

    List<SelectListItem> gender = new List<SelectListItem>();
    gender.Add(new SelectListItem
    {
        Value = "M",
        Text = "Male"
    });
    gender.Add(new SelectListItem
    {
        Value = "F",
        Text = "Female"
    });
}

<link href="~/vendors/datetimepicker/jquery-ui.css" rel="stylesheet" />
<div class="right_col" role="main">
    <h2>Add Student</h2>
    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="x_panel">
                <div class="x_title">

                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()

                        <div class="form-horizontal">
                            @Html.HiddenFor(model => model.adm_session)
                            @Html.HiddenFor(model => model.reg_no)
                            @Html.HiddenFor(model => model.reg_date)
                            <hr />
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="form-group">
                                @Html.LabelFor(model => model.std_first_name, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_first_name, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_first_name, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_last_name, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_last_name, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_last_name, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_father_name, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_father_name, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_father_name, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_mother_name, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_mother_name, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_mother_name, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_address, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_address, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_address, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_address1, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_address1, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_address1, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_address2, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_address2, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_address2, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_district, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_district, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_district, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_state, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_state, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_state, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_country, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_country, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_country, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_pincode, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_pincode, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_pincode, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="form-group">
                                @Html.LabelFor(model => model.std_contact, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_contact, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_contact, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_contact1, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_contact1, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_contact1, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_contact2, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_contact2, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_contact2, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_email, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_email, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_email, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_father_occupation, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_father_occupation, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_father_occupation, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_mother_occupation, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_mother_occupation, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_mother_occupation, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_aadhar, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_aadhar, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_aadhar, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_blood_gp, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_blood_gp, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_blood_gp, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_house_income, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_house_income, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_house_income, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_nationality, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_nationality, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_nationality, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_category, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.DropDownListFor(model => model.std_category, category as IEnumerable<SelectListItem>, "Please Select Category", htmlAttributes: new { @class = "form-control" })

                                    @Html.ValidationMessageFor(model => model.std_category, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_cast, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_cast, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_cast, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_dob_str, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_dob_str, new { htmlAttributes = new { id = "dob", @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_dob_str, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_sex, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.DropDownListFor(model => model.std_sex, gender as IEnumerable<SelectListItem>, htmlAttributes: new { id = "dob", @class = "form-control" })
                                    @*@Html.EditorFor(model => model.std_sex, new { htmlAttributes = new { id = "dob", @class = "form-control" } })*@
                                    @Html.ValidationMessageFor(model => model.std_sex, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_last_school, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_last_school, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_last_school, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_admission_date_str, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })


                                <div class="col-md-10 col-xs-12 col-sm-10">

                                    @Html.TextBoxFor(model => model.std_admission_date_str, new { id = "date", @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.std_admission_date_str, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_admission_class, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.DropDownList("std_admission_class", ViewData["class_name"] as IEnumerable<SelectListItem>, "Please Select Class", htmlAttributes: new { @class = "form-control" })

                                    @Html.ValidationMessageFor(model => model.std_admission_class, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="form-group">
                                @Html.LabelFor(model => model.class_name, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.DropDownList("class_id", ViewData["class_id"] as IEnumerable<SelectListItem>, "Select Class", htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.class_name, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.section_name, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.DropDownList("std_section_id", new SelectList(string.Empty, "section_id", "section_name"), "Select Section", htmlAttributes: new { @class = "form-control" })

                                    @Html.ValidationMessageFor(model => model.section_name, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.std_house, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_house, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_house, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="form-group">
                                @Html.LabelFor(model => model.std_remark, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.std_remark, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.std_remark, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.pickup_point, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.DropDownList("std_pickup_id", ViewData["pickup_id"] as IEnumerable<SelectListItem>, "Select Pickup Point", htmlAttributes: new { @class = "form-control" })

                                    @Html.ValidationMessageFor(model => model.pickup_point, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.fees_amount, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                                <div class="col-md-10 col-xs-12 col-sm-10">
                                    @Html.EditorFor(model => model.fees_amount, new { htmlAttributes = new { @disabled = "disable", @id = "fees", @class = "form-control" } })
                                    @Html.HiddenFor(model => model.fees_amount)
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-offset-2 col-sm-offset-2 col-md-10 col-sm-10">
                                    <input type="submit" value="Admit" class="btn btn-default please_wait" />
                                </div>
                            </div>
                        </div>
                    }

                    
                </div>
                </div>
            <div>
                @Html.ActionLink("Back to List", "AllRegistrationList", "std_registration", new { area = "" }, new { @class = "btn btn-primary please_wait" })
            </div>
            </div>
        </div>
    </div>

                @section Scripts {


                    <script type="text/javascript">

                           $(document).ready(function () {

                                    //Dropdownlist Selectedchange event

                               $("#class_id").change(function () {

                                        $("#std_section_id").empty();

                                        $.ajax({

                                            type: 'POST',

                                            url: '@Url.Action("GetSections")', dataType: 'json', data: { id: $("#class_id").val() }, success: function (sections)
                                            {

                                                // states contains the JSON formatted list

                                                // of states passed from the controller



                                                $.each(sections, function (i, sections) {

                                                $("#std_section_id").append('<option value="' + sections.Value + '">' +

                                                     sections.Text + '</option>');

                                                // here we are adding option for States



                                                });

                                            },

                                            error: function (ex) {

                                                //alert('Failed to retrieve sections.' + ex);

                                            }

                                        });



                                        return false;

                               })

                               $("#std_admission_class").change(function () {



                               $.ajax({

                                   type: 'POST',

                                   url: '@Url.Action("GetFees")', dataType: 'json', data: { id: $("#std_admission_class").val() }, success: function (fees) {
                                       $("#fees").val(fees);
                                       $("#fees_amount").val(fees);
                                   }


                               });

                           });


                               return false;

                           })

                    </script>

                    <script src="~/vendors/datetimepicker/jquery-1.10.2.js"></script>
                    <script src="~/vendors/datetimepicker/jquery-ui.js"></script>
                    <script>
         $(function() {
             $("#date").datepicker({
                 dateFormat: 'dd/mm/yy',
                 changeMonth: true,
                 changeYear: true
             });

         });

         $(function () {
             $("#dob").datepicker({
                 dateFormat: 'dd/mm/yy',
                 changeMonth: true,
                 changeYear: true,
                 yearRange: "2000:2999"
             });

         });
                    </script>



                    @Scripts.Render("~/bundles/jqueryval")
                }
