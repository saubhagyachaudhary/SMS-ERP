@model SMS.Models.mst_term_rules

@{
    ViewBag.Title = "AddTermRules";

    List<SelectListItem> rules = new List<SelectListItem>();
    rules.Add(new SelectListItem
    {
        Value = "Only",
        Text = "Only"
    });
    rules.Add(new SelectListItem
    {
        Value = "Maximum",
        Text = "Maximum"
    });
    rules.Add(new SelectListItem
    {
        Value = "Minimum",
        Text = "Minimum"
    });
    rules.Add(new SelectListItem
    {
        Value = "Average",
        Text = "Average"
    });
}


<div class="right_col" role="main">
    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12">
            <div class="x_panel">

                <h2>Create Term Rules</h2>

                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                      
                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                        <div class="form-group">
                            @Html.LabelFor(model => model.evaluation_name, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                            <div class="col-md-10 col-xs-12 col-sm-10">
                                @Html.EditorFor(model => model.evaluation_name, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.evaluation_name, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.term_name, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                            <div class="col-md-10 col-xs-12 col-sm-10">
                                @Html.DropDownListFor(model => model.term_id, ViewData["term_id"] as IEnumerable<SelectListItem>, "Please Select Term", htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.term_name, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.class_name, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                            <div class="col-md-10 col-xs-12 col-sm-10">
                                @Html.DropDownListFor(model => model.class_id, ViewData["class_id"] as IEnumerable<SelectListItem>, "Please Select Class", htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.class_name, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.exam_id1, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                            <div class="col-md-10 col-xs-12 col-sm-10">
                                @Html.DropDownList("exam_id1", new SelectList(string.Empty, "exam_id", "exam_name"), "Select Exam", htmlAttributes: new { @class = "form-control" })


                                @Html.ValidationMessageFor(model => model.exam_id1, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.exam_id2, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                            <div class="col-md-10 col-xs-12 col-sm-10">
                                @Html.DropDownList("exam_id2", new SelectList(string.Empty, "exam_id", "exam_name"), "Select Exam", htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.exam_id2, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.rule, htmlAttributes: new { @class = "control-label col-md-2 col-sm-2" })
                            <div class="col-md-10 col-xs-12 col-sm-10">
                                @Html.DropDownListFor(model => model.rule, rules as IEnumerable<SelectListItem>,  htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.rule, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-sm-offset-2 col-md-10 col-sm-10">
                                <input type="submit" value="Create" class="btn btn-default please_wait" />
                            </div>
                        </div>
                    </div>
                }

                <div>
                    @Html.ActionLink("Back to List", "AllTermRuleList", new { area = "" }, new { @class = "btn btn-primary please_wait" })
                </div>
                </div>
</div>
</div>
</div>
@section Scripts {


    <script type="text/javascript">

        

                           $(document).ready(function () {

                                    //Dropdownlist Selectedchange event

                               $("#class_id").change(function () {

                                   $("#exam_id1").empty();
                                   $("#exam_id2").empty();
                                   $("#exam_id2").append('<option value=0>No Exam</option>');
                                        $.ajax({

                                            type: 'POST',

                                            url: '@Url.Action("GetExam")', dataType: 'json', data: { id: $("#class_id").val() }, success: function (exams)
                                            {

                                                // states contains the JSON formatted list

                                                // of states passed from the controller



                                                $.each(exams, function (i, exams) {

                                                    $("#exam_id1").append('<option value="' + exams.Value + '">' +

                                                     exams.Text + '</option>');

                                                    $("#exam_id2").append('<option value="' + exams.Value + '">' +

                                                    exams.Text + '</option>');

                                                // here we are adding option for States



                                                });

                                            },

                                            error: function (ex) {

                                                //alert('Failed to retrieve sections.' + ex);

                                            }

                                        });



                                        return false;

                               })

                             
                           

                               return false;

                           })

    </script>
    }