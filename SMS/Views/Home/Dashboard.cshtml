@model SMS.Models.dashboard
@{
    ViewBag.Title = "Dashboard";
}

@*<link href="~/vendors/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
    <!-- Font Awesome -->
    <link href="~/vendors/font-awesome/css/font-awesome.min.css" rel="stylesheet" />
    <!-- NProgress -->
    <link href="~/vendors/nprogress/nprogress.css" rel="stylesheet" />
    <!-- Custom Theme Style -->
    <link href="~/build/css/custom.min.css" rel="stylesheet" />*@

  @{
      string wedget = Request.Cookies["wedget"].Value.ToString();
      var list = wedget.Split(',');
      int format = 0;

      string class_format = "";
      string class_format1 = "";
}

<div class="right_col" role="main">
    
    @if (list.Contains("school_strength") || list.Contains("fees_received") || list.Contains("transport_std") || list.Contains("newAdmission") || list.Contains("sms_credit_left") || list.Contains("total_cash_bank_received"))
    {
    <div class="">
        @*<div class="col-md-12 col-sm-12 col-xs-12">*@

        @if (list.Contains("school_strength"))
        {
            format++;
        }
        @if (list.Contains("fees_received"))
        {
            format++;
        }
        @if (list.Contains("transport_std"))
        {
            format++;
        }
        @if (list.Contains("newAdmission"))
        {
            format++;
        }
        @if (list.Contains("sms_credit_left"))
        {
            format++;
        }
        @if (list.Contains("total_cash_bank_received"))
        {
            format++;
        }

        

        @if(format <= 3)
        {

            decimal tmp = (12m / (format * 12m)) * 12m;
            class_format = String.Format("animated flipInY col-lg-{0} col-md-{0} col-sm-12 col-xs-12", (int)Math.Round(tmp));
        }
        @if(format == 4)
        {
            decimal tmp = ((12m / (format * 12m)) * 12m)*2;
            class_format = String.Format("animated flipInY col-lg-{0} col-md-{0} col-sm-12 col-xs-12", (int)Math.Round(tmp));
        }
        
        @if (format == 5)
        {
            decimal tmp = 4m;
            class_format = String.Format("animated flipInY col-lg-{0} col-md-{0} col-sm-12 col-xs-12", (int)Math.Round(tmp));
        }

        @if (format == 6)
        {
            decimal tmp = ((12m / (format * 12m)) * 12m) * 3m;
            class_format = String.Format("animated flipInY col-lg-{0} col-md-{0} col-sm-12 col-xs-12", (int)Math.Round(tmp));
        }

        @{ 
            format = 0;
        }
       
        <!-- page content -->
        <div class="row top_tiles">
            @if (list.Contains("school_strength"))
            {
                
                <div class="@class_format">
                    <div class="tile-stats">
                        <div class="icon"><i class="fa fa-user"></i></div>
                        <div class="count">@Model.school_strength.ToString("N0", System.Globalization.CultureInfo.CreateSpecificCulture("hi-IN"))</div>
                        <h3>School Strength</h3>
                        <p><i class="fa fa-male"></i>Male: @Model.male_std.ToString("N0", System.Globalization.CultureInfo.CreateSpecificCulture("hi-IN"))  &nbsp &nbsp &nbsp <i class="fa fa-female"></i>Female: @Model.female_std.ToString("N0", System.Globalization.CultureInfo.CreateSpecificCulture("hi-IN")) </p>

                    </div>
                </div>
            }
            @if (list.Contains("fees_received"))
            {
                <div class="@class_format">
                    <div class="tile-stats">
                        <div class="icon"><i class="fa fa-inr"></i></div>
                        <div class="count">@Model.fees_received.ToString("N2", System.Globalization.CultureInfo.CreateSpecificCulture("hi-IN"))</div>
                        <h3>Daily Fees Received</h3>
                        <p><i class="fa fa-bank"></i>Bank: @Model.bank_received.ToString("N2", System.Globalization.CultureInfo.CreateSpecificCulture("hi-IN"))  &nbsp &nbsp &nbsp <i class="fa fa-money"></i>Cash: @Model.cash_received.ToString("N2", System.Globalization.CultureInfo.CreateSpecificCulture("hi-IN")) </p>

                    </div>
                </div>
            }
                @if (list.Contains("transport_std"))
                {
                    <div class="@class_format">
                        <div class="tile-stats">
                            <div class="icon"><i class="fa fa-bus"></i></div>
                            <div class="count">@Model.transport_std.ToString("N0", System.Globalization.CultureInfo.CreateSpecificCulture("hi-IN"))</div>
                            <h3>Transport</h3>
                            <p><i class="fa fa-male"></i>Male: @Model.transport_male_std.ToString("N0", System.Globalization.CultureInfo.CreateSpecificCulture("hi-IN"))  &nbsp &nbsp &nbsp <i class="fa fa-female"></i>Female: @Model.transport_female_std.ToString("N0", System.Globalization.CultureInfo.CreateSpecificCulture("hi-IN")) </p>
                        </div>
                    </div>
                }
            @if (list.Contains("newAdmission"))
            {
                <div class="@class_format">
                    <div class="tile-stats">
                        <div class="icon"><i class="fa fa-user-plus"></i></div>
                        <div class="count">@Model.newAdmission.ToString("N0", System.Globalization.CultureInfo.CreateSpecificCulture("hi-IN"))</div>
                        <h3>New admission</h3>
                        <p><i class="fa fa-male"></i>Male: @Model.newAdmission_male.ToString("N0", System.Globalization.CultureInfo.CreateSpecificCulture("hi-IN"))  &nbsp &nbsp &nbsp <i class="fa fa-female"></i>Female: @Model.newAdmission_female.ToString("N0", System.Globalization.CultureInfo.CreateSpecificCulture("hi-IN")) </p>
                    </div>
                </div>
            }
            @if (list.Contains("sms_credit_left"))
            {
                <div class="@class_format">
                    <div class="tile-stats">
                        <div class="icon"><i class="fa fa-wechat"></i></div>
                        <div class="count">@int.Parse(Model.sms_credit_left).ToString("N0", System.Globalization.CultureInfo.CreateSpecificCulture("hi-IN"))</div>
                        <h3>SMS Credit Left</h3>
                        <p><i class="fa fa-wechat"></i>Today's Consumption: @int.Parse(Model.today_consumption).ToString("N0", System.Globalization.CultureInfo.CreateSpecificCulture("hi-IN"))</p>
                    </div>
                </div>
            }
            @if (list.Contains("total_cash_bank_received"))
            {
                <div class="@class_format">
                    <div class="tile-stats">
                        <div class="icon"><i class="fa fa-inr"></i></div>
                        <div class="count count1">@Model.total_cash_bank_received.ToString("N2", System.Globalization.CultureInfo.CreateSpecificCulture("hi-IN"))</div>
                        <h3>Total Fees Received</h3>
                        <p><i class="fa fa-bank"></i>Bank: @Model.total_bank_received.ToString("N2", System.Globalization.CultureInfo.CreateSpecificCulture("hi-IN"))  &nbsp &nbsp &nbsp <i class="fa fa-money"></i>Cash: @Model.total_cash_received.ToString("N2", System.Globalization.CultureInfo.CreateSpecificCulture("hi-IN")) </p>

                    </div>
                </div>
            }
        </div>
    </div>
    }
    <!-- page content -->
@if (list.Contains("class_wise_dues_chart") || list.Contains("total_recovery") || list.Contains("class_wise_attendance_chart") || list.Contains("attendance_summary")|| list.Contains("date_wise_attendance_chart"))
{

    <div class="row">

        @if (list.Contains("class_wise_dues_chart"))
        {
            format++;
        }
        @if (list.Contains("total_recovery"))
        {
            format++;
        }
        @if (list.Contains("class_wise_attendance_chart"))
        {
            format++;
        }
        @if (list.Contains("attendance_summary"))
        {
            format++;
        }

        @if (format == 1 || list.Contains("class_wise_dues_chart") || list.Contains("class_wise_attendance_chart"))
        {

            decimal tmp = 12m;
            class_format = String.Format("col-md-{0} col-sm-12 col-xs-12", (int)Math.Round(tmp));

        }

        @if (format == 2 && list.Contains("class_wise_dues_chart") && list.Contains("class_wise_attendance_chart"))
        {

            decimal tmp = 12m;
            class_format = String.Format("col-md-{0} col-sm-12 col-xs-12", (int)Math.Round(tmp));

        }

        @if (format == 2)
        {
            if (list.Contains("total_recovery") || list.Contains("attendance_summary"))
            {
                decimal tmp = 4m;
                class_format = String.Format("col-md-{0} col-sm-12 col-xs-12", (int)Math.Round(tmp));

            }

            if (list.Contains("class_wise_dues_chart") || list.Contains("class_wise_attendance_chart"))
            {
                decimal tmp = 8m;
                class_format1 = String.Format("col-md-{0} col-sm-12 col-xs-12", (int)Math.Round(tmp));

            }
        }

        @if (format == 3 || format == 4)
        {
           
                decimal tmp = 4m;
                class_format = String.Format("col-md-{0} col-sm-12 col-xs-12", (int)Math.Round(tmp));

          
                tmp = 8m;
                class_format1 = String.Format("col-md-{0} col-sm-12 col-xs-12", (int)Math.Round(tmp));

          
        }
        @{
            format = 0;
        }

        @if (list.Contains("class_wise_dues_chart"))
        {
        <div class="@class_format1">
            <div class="x_panel">
                <div class="x_title">
                    <h2>Class wise Fees Dues Chart</h2>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content" style="overflow-x:auto;">

                    <div id="echart_line" style="height:250px;"></div>

                </div>
            </div>
        </div>
        }
        @if (list.Contains("total_recovery"))
        {
        @*<div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">*@
        <div class="@class_format">
            <div class="x_panel">
                <div class="x_title">
                    <h2>Total Recovery</h2>
                    <ul class="nav navbar-right panel_toolbox"></ul>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content">

                    <div id="echart_donut" style="height:250px;"></div>

                </div>
            </div>
        </div>
        }
        @if (list.Contains("class_wise_attendance_chart"))
        {
        <div class="@class_format1">

            @*<div class="col-lg-9 col-md-3 col-sm-6 col-xs-12">*@
            @*<div class="col-md-9 col-sm-6 col-xs-12">*@
            <div class="x_panel">
                <div class="x_title">
                    <h2>Class wise attendance Chart</h2>

                    <div class="clearfix"></div>
                </div>
                <div class="x_content" style="overflow-x:auto;">

                    <div id="echart_line_attendance" style="height:250px;"></div>

                </div>
            </div>
        </div>

        }
        @if (list.Contains("attendance_summary"))
        {

        <div class="@class_format">
            <div class="x_panel">
                <div class="x_title">
                    <h2>Daily Attendance Summary</h2>
                    <ul class="nav navbar-right panel_toolbox"></ul>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content">

                    <div id="echart_donut_attendance" style="height:250px;"></div>

                </div>
            </div>
        </div>
        }

        @if (list.Contains("date_wise_attendance_chart"))
        {
            <div class="col-md-12 col-sm-12 col-xs-12">

                @*<div class="col-lg-9 col-md-3 col-sm-6 col-xs-12">*@
                @*<div class="col-md-9 col-sm-6 col-xs-12">*@
                <div class="x_panel">
                    <div class="x_title">
                        <h2>Previous days attendance Chart</h2>

                        <div class="clearfix"></div>
                    </div>
                    <div class="x_content" style="overflow-x:auto;">

                        <div id="echart_line_attendance_datewise" style="height:250px;"></div>

                    </div>
                </div>
            </div>

        }

    </div>
   

}
@if (list.Contains("finalize_list") || list.Contains("list_att_left_class"))
{
    
    <div class="row">
        @if (list.Contains("finalize_list"))
        {
            format++;
        }
        @if (list.Contains("list_att_left_class"))
        {
            format++;
        }

        @if (format == 1)
        {

            decimal tmp = 12m;
            class_format = String.Format("col-md-{0} col-xs-12 col-sm-12", (int)Math.Round(tmp));


        }
        else
        {
            decimal tmp = 6m;
            class_format = String.Format("col-md-{0} col-xs-12 col-sm-12", (int)Math.Round(tmp));
        }


        @if (list.Contains("finalize_list"))
        {
        <div class="@class_format">
            <div class="x_panel">
                <div class="x_title">
                    <h2>Classes left for finalization <small>Attendance</small></h2>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content" style="height:250px; overflow-y:auto;">
                    @foreach (var item in Model.finalize_list)
                    {
                        <article class="media event">

                            <a class="pull-left date">
                                <p class="month">@item.month_name</p>
                                <p class="day">@item.date_num</p>
                            </a>
                            <div class="media-body">
                                <a class="title please_wait" href="@Url.Action("finalize_class_attendance_sheet", "attendance_register", new { section_id = item.section_id, session = item.session, att_date = item.att_date.ToString("yyyy-MM-dd") })">@String.Format("{0}", item.class_name)  </a>
                                <p>@String.Format("Total number of student present {0}, total number of student absent {1}", item.present, item.absent)</p>
                            </div>

                        </article>
                    }
                </div>
            </div>
        </div>
        }
        @if (list.Contains("list_att_left_class"))
        {

        <div class="@class_format">
            <div class="x_panel">
                <div class="x_title">
                    <h2>List of classes whose attendance not done.<small>Attendance</small></h2>
                    <div class="clearfix"></div>
                </div>
                <div class="x_content" style="height:250px; overflow-y:auto;">
                    @foreach (var item in Model.list_att_left_class)
                    {
                        <ul class="list-unstyled msg_list" >
                            <li>
                                @*<a>
                                    <span>
                                        <span>@item.class_name</span>
                                        <p>Class Teacher: @item.class_teacher Finalizer: @item.finalizer</p>
                                    </span>

                                </a>*@
                                <div class="media-body">
                                    <H4>@item.class_name</H4>
                                    <p>@String.Format("Class Teacher: {0}, Finalizer: {1}", item.class_teacher, item.finalizer)</p>
                                </div>
                            </li>
                        </ul>
                    }
                </div>
            </div>
        </div>
        }
        @if (list.Contains("std_birthday_list"))
        {
            <div class="col-md-6 col-xs-12 col-sm-12">
                <div class="x_panel">
                    <div class="x_title">
                        <h2>Upcomming Students Birthday List </h2>
                        <div class="clearfix"></div>
                    </div>
                    <div class="x_content" style="height:250px; overflow-y:auto;">
                        @foreach (var item in Model.std_birthday_list)
                    {
                            <article class="media event">

                                <a class="pull-left date">
                                    <p class="month">@item.month_name</p>
                                    <p class="day">@item.date_num</p>
                                </a>
                                <div class="media-body">
                                    <br />
                                    <p>@String.Format("Student Name: {0}, Class {1} Section {2}", item.std_name, item.class_name,item.section_name)</p>
                                </div>

                            </article>
                        }
                    </div>
                </div>
            </div>
        }
        @if (list.Contains("staff_birthday_list"))
        {
            <div class="col-md-6 col-xs-12 col-sm-12">
                <div class="x_panel">
                    <div class="x_title">
                        <h2>Upcomming Staff Birthday List </h2>
                        <div class="clearfix"></div>
                    </div>
                    <div class="x_content" style="height:250px; overflow-y:auto;">
                        @foreach (var item in Model.staff_birthday_list)
                    {
                            <article class="media event">

                                <a class="pull-left date">
                                    <p class="month">@item.month_name</p>
                                    <p class="day">@item.date_num</p>
                                </a>
                                <div class="media-body">
                                    <br />
                                    <p>@String.Format("Employee Name: {0}", item.std_name)</p>
                                </div>

                            </article>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}


    </div>




<script src="~/vendors/echarts/dist/echarts.min.js"></script>

<script>
    var theme = {
        color: [
            '#26B99A', '#34495E', '#BDC3C7', '#3498DB',
            '#9B59B6', '#8abb6f', '#759c6a', '#bfd3b7'
        ],

        title: {
            itemGap: 8,
            textStyle: {
                fontWeight: 'normal',
                color: '#408829'
            }
        },

        dataRange: {
            color: ['#1f610a', '#97b58d']
        },

        toolbox: {
            color: ['#408829', '#408829', '#408829', '#408829']
        },

        tooltip: {
            backgroundColor: 'rgba(0,0,0,0.5)',
            axisPointer: {
                type: 'line',
                lineStyle: {
                    color: '#408829',
                    type: 'dashed'
                },
                crossStyle: {
                    color: '#408829'
                },
                shadowStyle: {
                    color: 'rgba(200,200,200,0.3)'
                }
            }
        },

        dataZoom: {
            dataBackgroundColor: '#eee',
            fillerColor: 'rgba(64,136,41,0.2)',
            handleColor: '#408829'
        },
        grid: {
            borderWidth: 0
        },

        categoryAxis: {
            axisLine: {
                lineStyle: {
                    color: '#408829'
                }
            },
            splitLine: {
                lineStyle: {
                    color: ['#eee']
                }
            }
        },

        valueAxis: {
            axisLine: {
                lineStyle: {
                    color: '#408829'
                }
            },
            splitArea: {
                show: true,
                areaStyle: {
                    color: ['rgba(250,250,250,0.1)', 'rgba(200,200,200,0.1)']
                }
            },
            splitLine: {
                lineStyle: {
                    color: ['#eee']
                }
            }
        },
        timeline: {
            lineStyle: {
                color: '#408829'
            },
            controlStyle: {
                normal: { color: '#408829' },
                emphasis: { color: '#408829' }
            }
        },

        k: {
            itemStyle: {
                normal: {
                    color: '#68a54a',
                    color0: '#a9cba2',
                    lineStyle: {
                        width: 1,
                        color: '#408829',
                        color0: '#86b379'
                    }
                }
            }
        },

        force: {
            itemStyle: {
                normal: {
                    linkStyle: {
                        strokeColor: '#408829'
                    }
                }
            }
        },
        chord: {
            padding: 4,
            itemStyle: {
                normal: {
                    lineStyle: {
                        width: 1,
                        color: 'rgba(128, 128, 128, 0.5)'
                    },
                    chordStyle: {
                        lineStyle: {
                            width: 1,
                            color: 'rgba(128, 128, 128, 0.5)'
                        }
                    }
                },
                emphasis: {
                    lineStyle: {
                        width: 1,
                        color: 'rgba(128, 128, 128, 0.5)'
                    },
                    chordStyle: {
                        lineStyle: {
                            width: 1,
                            color: 'rgba(128, 128, 128, 0.5)'
                        }
                    }
                }
            }
        },
        gauge: {
            startAngle: 225,
            endAngle: -45,
            axisLine: {
                show: true,
                lineStyle: {
                    color: [[0.2, '#86b379'], [0.8, '#68a54a'], [1, '#408829']],
                    width: 8
                }
            },
            axisTick: {
                splitNumber: 10,
                length: 12,
                lineStyle: {
                    color: 'auto'
                }
            },
            axisLabel: {
                textStyle: {
                    color: 'auto'
                }
            },
            splitLine: {
                length: 18,
                lineStyle: {
                    color: 'auto'
                }
            },
            pointer: {
                length: '90%',
                color: 'auto'
            },
            title: {
                textStyle: {
                    color: '#333'
                }
            },
            detail: {
                textStyle: {
                    color: 'auto'
                }
            }
        },
        textStyle: {
            fontFamily: 'Arial, Verdana, sans-serif'
        }
    };
     var echartLine = echarts.init(document.getElementById('echart_line'), theme);

    echartLine.setOption({

        tooltip: {
            trigger: 'axis'
        },
        legend: {
            x: 220,
            y: 40,
            data: ['Recovered', 'Dues']
        },
        toolbox: {
            show: true,
            feature: {
                magicType: {
                    show: true,
                    title: {
                        line: 'Line',
                        bar: 'Bar',
                        stack: 'Stack',

                    },
                    type: ['line', 'bar', 'stack']
                },
                restore: {
                    show: true,
                    title: "Restore"
                },
                saveAsImage: {
                    show: true,
                    title: "Save Image"
                }
            }
        },
        calculable: true,
        xAxis: [{
            type: 'category',
            boundaryGap: false,
            data: [@Html.Raw(string.Join(",",Model.name.Select(x=>"'"+x+"'")))]
        }],
        yAxis: [{
            type: 'value'
        }],
        series: [{
            name: 'Recovered',
            type: 'line',
            smooth: true,
            itemStyle: {
                normal: {
                    areaStyle: {
                        type: 'default'
                    }
                }
            },
            data: [@Html.Raw(string.Join(",", Model.recovered.Select(x => x )))]
        }, {
            name: 'Dues',
            type: 'line',
            smooth: true,
            itemStyle: {
                normal: {
                    areaStyle: {
                        type: 'default'
                    }
                }
            },
            data: [@Html.Raw(string.Join(",", Model.dues.Select(x =>  x )))]

        }]
    });
</script>

<script>


    var theme = {
        color: [
            '#26B99A', '#34495E', '#BDC3C7', '#3498DB',
            '#9B59B6', '#8abb6f', '#759c6a', '#bfd3b7'
        ],

        title: {
            itemGap: 8,
            textStyle: {
                fontWeight: 'normal',
                color: '#408829'
            }
        },

        dataRange: {
            color: ['#1f610a', '#97b58d']
        },

        toolbox: {
            color: ['#408829', '#408829', '#408829', '#408829']
        },

        tooltip: {
            backgroundColor: 'rgba(0,0,0,0.5)',
            axisPointer: {
                type: 'line',
                lineStyle: {
                    color: '#408829',
                    type: 'dashed'
                },
                crossStyle: {
                    color: '#408829'
                },
                shadowStyle: {
                    color: 'rgba(200,200,200,0.3)'
                }
            }
        },

        dataZoom: {
            dataBackgroundColor: '#eee',
            fillerColor: 'rgba(64,136,41,0.2)',
            handleColor: '#408829'
        },
        grid: {
            borderWidth: 0
        },

        categoryAxis: {
            axisLine: {
                lineStyle: {
                    color: '#408829'
                }
            },
            splitLine: {
                lineStyle: {
                    color: ['#eee']
                }
            }
        },

        valueAxis: {
            axisLine: {
                lineStyle: {
                    color: '#408829'
                }
            },
            splitArea: {
                show: true,
                areaStyle: {
                    color: ['rgba(250,250,250,0.1)', 'rgba(200,200,200,0.1)']
                }
            },
            splitLine: {
                lineStyle: {
                    color: ['#eee']
                }
            }
        },
        timeline: {
            lineStyle: {
                color: '#408829'
            },
            controlStyle: {
                normal: { color: '#408829' },
                emphasis: { color: '#408829' }
            }
        },

        k: {
            itemStyle: {
                normal: {
                    color: '#68a54a',
                    color0: '#a9cba2',
                    lineStyle: {
                        width: 1,
                        color: '#408829',
                        color0: '#86b379'
                    }
                }
            }
        },

        force: {
            itemStyle: {
                normal: {
                    linkStyle: {
                        strokeColor: '#408829'
                    }
                }
            }
        },
        chord: {
            padding: 4,
            itemStyle: {
                normal: {
                    lineStyle: {
                        width: 1,
                        color: 'rgba(128, 128, 128, 0.5)'
                    },
                    chordStyle: {
                        lineStyle: {
                            width: 1,
                            color: 'rgba(128, 128, 128, 0.5)'
                        }
                    }
                },
                emphasis: {
                    lineStyle: {
                        width: 1,
                        color: 'rgba(128, 128, 128, 0.5)'
                    },
                    chordStyle: {
                        lineStyle: {
                            width: 1,
                            color: 'rgba(128, 128, 128, 0.5)'
                        }
                    }
                }
            }
        },
        gauge: {
            startAngle: 225,
            endAngle: -45,
            axisLine: {
                show: true,
                lineStyle: {
                    color: [[0.2, '#86b379'], [0.8, '#68a54a'], [1, '#408829']],
                    width: 8
                }
            },
            axisTick: {
                splitNumber: 10,
                length: 12,
                lineStyle: {
                    color: 'auto'
                }
            },
            axisLabel: {
                textStyle: {
                    color: 'auto'
                }
            },
            splitLine: {
                length: 18,
                lineStyle: {
                    color: 'auto'
                }
            },
            pointer: {
                length: '90%',
                color: 'auto'
            },
            title: {
                textStyle: {
                    color: '#333'
                }
            },
            detail: {
                textStyle: {
                    color: 'auto'
                }
            }
        },
        textStyle: {
            fontFamily: 'Arial, Verdana, sans-serif'
        }
    };


    var echartLine = echarts.init(document.getElementById('echart_line_attendance_datewise'), theme);

    echartLine.setOption({

        tooltip: {
            trigger: 'axis'
        },
        legend: {
            x: 220,
            y: 40,
            data: ['Present', 'Absent']
        },
        toolbox: {
            show: true,
            feature: {
                magicType: {
                    show: true,
                    title: {
                        line: 'Line',
                        bar: 'Bar',
                        stack: 'Stack',

                    },
                    type: ['line', 'bar', 'stack']
                },
                restore: {
                    show: true,
                    title: "Restore"
                },
                saveAsImage: {
                    show: true,
                    title: "Save Image"
                }
            }
        },
        calculable: true,
        xAxis: [{
            type: 'category',
            boundaryGap: false,
            data: [@Html.Raw(string.Join(",",Model.date_list.Select(x=>"'"+x+"'")))]
        }],
        yAxis: [{
            type: 'value'
        }],
        series: [{
            name: 'Present',
            type: 'line',
            smooth: true,
            itemStyle: {
                normal: {
                    areaStyle: {
                        type: 'default'
                    }
                }
            },
            data: [@Html.Raw(string.Join(",", Model.thirty_day_present.Select(x => x )))]
        }, {
            name: 'Absent',
            type: 'line',
            smooth: true,
            itemStyle: {
                normal: {
                    areaStyle: {
                        type: 'default'
                    }
                }
            },
            data: [@Html.Raw(string.Join(",", Model.thirty_day_absent.Select(x =>  x )))]

        }]
    });
</script>


<script>


    var theme = {
        color: [
            '#26B99A', '#34495E', '#BDC3C7', '#3498DB',
            '#9B59B6', '#8abb6f', '#759c6a', '#bfd3b7'
        ],

        title: {
            itemGap: 8,
            textStyle: {
                fontWeight: 'normal',
                color: '#408829'
            }
        },

        dataRange: {
            color: ['#1f610a', '#97b58d']
        },

        toolbox: {
            color: ['#408829', '#408829', '#408829', '#408829']
        },

        tooltip: {
            backgroundColor: 'rgba(0,0,0,0.5)',
            axisPointer: {
                type: 'line',
                lineStyle: {
                    color: '#408829',
                    type: 'dashed'
                },
                crossStyle: {
                    color: '#408829'
                },
                shadowStyle: {
                    color: 'rgba(200,200,200,0.3)'
                }
            }
        },

        dataZoom: {
            dataBackgroundColor: '#eee',
            fillerColor: 'rgba(64,136,41,0.2)',
            handleColor: '#408829'
        },
        grid: {
            borderWidth: 0
        },

        categoryAxis: {
            axisLine: {
                lineStyle: {
                    color: '#408829'
                }
            },
            splitLine: {
                lineStyle: {
                    color: ['#eee']
                }
            }
        },

        valueAxis: {
            axisLine: {
                lineStyle: {
                    color: '#408829'
                }
            },
            splitArea: {
                show: true,
                areaStyle: {
                    color: ['rgba(250,250,250,0.1)', 'rgba(200,200,200,0.1)']
                }
            },
            splitLine: {
                lineStyle: {
                    color: ['#eee']
                }
            }
        },
        timeline: {
            lineStyle: {
                color: '#408829'
            },
            controlStyle: {
                normal: { color: '#408829' },
                emphasis: { color: '#408829' }
            }
        },

        k: {
            itemStyle: {
                normal: {
                    color: '#68a54a',
                    color0: '#a9cba2',
                    lineStyle: {
                        width: 1,
                        color: '#408829',
                        color0: '#86b379'
                    }
                }
            }
        },

        force: {
            itemStyle: {
                normal: {
                    linkStyle: {
                        strokeColor: '#408829'
                    }
                }
            }
        },
        chord: {
            padding: 4,
            itemStyle: {
                normal: {
                    lineStyle: {
                        width: 1,
                        color: 'rgba(128, 128, 128, 0.5)'
                    },
                    chordStyle: {
                        lineStyle: {
                            width: 1,
                            color: 'rgba(128, 128, 128, 0.5)'
                        }
                    }
                },
                emphasis: {
                    lineStyle: {
                        width: 1,
                        color: 'rgba(128, 128, 128, 0.5)'
                    },
                    chordStyle: {
                        lineStyle: {
                            width: 1,
                            color: 'rgba(128, 128, 128, 0.5)'
                        }
                    }
                }
            }
        },
        gauge: {
            startAngle: 225,
            endAngle: -45,
            axisLine: {
                show: true,
                lineStyle: {
                    color: [[0.2, '#86b379'], [0.8, '#68a54a'], [1, '#408829']],
                    width: 8
                }
            },
            axisTick: {
                splitNumber: 10,
                length: 12,
                lineStyle: {
                    color: 'auto'
                }
            },
            axisLabel: {
                textStyle: {
                    color: 'auto'
                }
            },
            splitLine: {
                length: 18,
                lineStyle: {
                    color: 'auto'
                }
            },
            pointer: {
                length: '90%',
                color: 'auto'
            },
            title: {
                textStyle: {
                    color: '#333'
                }
            },
            detail: {
                textStyle: {
                    color: 'auto'
                }
            }
        },
        textStyle: {
            fontFamily: 'Arial, Verdana, sans-serif'
        }
    };


    var echartLine = echarts.init(document.getElementById('echart_line_attendance'), theme);

    echartLine.setOption({

        tooltip: {
            trigger: 'axis'
        },
        legend: {
            x: 220,
            y: 40,
            data: ['Present', 'Absent']
        },
        toolbox: {
            show: true,
            feature: {
                magicType: {
                    show: true,
                    title: {
                        line: 'Line',
                        bar: 'Bar',
                        stack: 'Stack',

                    },
                    type: ['line', 'bar', 'stack']
                },
                restore: {
                    show: true,
                    title: "Restore"
                },
                saveAsImage: {
                    show: true,
                    title: "Save Image"
                }
            }
        },
        calculable: true,
        xAxis: [{
            type: 'category',
            boundaryGap: false,
            data: [@Html.Raw(string.Join(",",Model.name_attendance.Select(x=>"'"+x+"'")))]
        }],
        yAxis: [{
            type: 'value'
        }],
        series: [{
            name: 'Present',
            type: 'line',
            smooth: true,
            itemStyle: {
                normal: {
                    areaStyle: {
                        type: 'default'
                    }
                }
            },
            data: [@Html.Raw(string.Join(",", Model.present.Select(x => x )))]
        }, {
            name: 'Absent',
            type: 'line',
            smooth: true,
            itemStyle: {
                normal: {
                    areaStyle: {
                        type: 'default'
                    }
                }
            },
            data: [@Html.Raw(string.Join(",", Model.absent.Select(x =>  x )))]

        }]
    });
</script>


<script>
    var theme = {
        color: [
            '#26B99A', '#34495E', '#BDC3C7', '#3498DB',
            '#9B59B6', '#8abb6f', '#759c6a', '#bfd3b7'
        ],

        title: {
            itemGap: 8,
            textStyle: {
                fontWeight: 'normal',
                color: '#408829'
            }
        },

        dataRange: {
            color: ['#1f610a', '#97b58d']
        },

        toolbox: {
            color: ['#408829', '#408829', '#408829', '#408829']
        },

        tooltip: {
            backgroundColor: 'rgba(0,0,0,0.5)',
            axisPointer: {
                type: 'line',
                lineStyle: {
                    color: '#408829',
                    type: 'dashed'
                },
                crossStyle: {
                    color: '#408829'
                },
                shadowStyle: {
                    color: 'rgba(200,200,200,0.3)'
                }
            }
        },

        dataZoom: {
            dataBackgroundColor: '#eee',
            fillerColor: 'rgba(64,136,41,0.2)',
            handleColor: '#408829'
        },
        grid: {
            borderWidth: 0
        },

        categoryAxis: {
            axisLine: {
                lineStyle: {
                    color: '#408829'
                }
            },
            splitLine: {
                lineStyle: {
                    color: ['#eee']
                }
            }
        },

        valueAxis: {
            axisLine: {
                lineStyle: {
                    color: '#408829'
                }
            },
            splitArea: {
                show: true,
                areaStyle: {
                    color: ['rgba(250,250,250,0.1)', 'rgba(200,200,200,0.1)']
                }
            },
            splitLine: {
                lineStyle: {
                    color: ['#eee']
                }
            }
        },
        timeline: {
            lineStyle: {
                color: '#408829'
            },
            controlStyle: {
                normal: { color: '#408829' },
                emphasis: { color: '#408829' }
            }
        },

        k: {
            itemStyle: {
                normal: {
                    color: '#68a54a',
                    color0: '#a9cba2',
                    lineStyle: {
                        width: 1,
                        color: '#408829',
                        color0: '#86b379'
                    }
                }
            }
        },

        force: {
            itemStyle: {
                normal: {
                    linkStyle: {
                        strokeColor: '#408829'
                    }
                }
            }
        },
        chord: {
            padding: 4,
            itemStyle: {
                normal: {
                    lineStyle: {
                        width: 1,
                        color: 'rgba(128, 128, 128, 0.5)'
                    },
                    chordStyle: {
                        lineStyle: {
                            width: 1,
                            color: 'rgba(128, 128, 128, 0.5)'
                        }
                    }
                },
                emphasis: {
                    lineStyle: {
                        width: 1,
                        color: 'rgba(128, 128, 128, 0.5)'
                    },
                    chordStyle: {
                        lineStyle: {
                            width: 1,
                            color: 'rgba(128, 128, 128, 0.5)'
                        }
                    }
                }
            }
        },
        gauge: {
            startAngle: 225,
            endAngle: -45,
            axisLine: {
                show: true,
                lineStyle: {
                    color: [[0.2, '#86b379'], [0.8, '#68a54a'], [1, '#408829']],
                    width: 8
                }
            },
            axisTick: {
                splitNumber: 10,
                length: 12,
                lineStyle: {
                    color: 'auto'
                }
            },
            axisLabel: {
                textStyle: {
                    color: 'auto'
                }
            },
            splitLine: {
                length: 18,
                lineStyle: {
                    color: 'auto'
                }
            },
            pointer: {
                length: '90%',
                color: 'auto'
            },
            title: {
                textStyle: {
                    color: '#333'
                }
            },
            detail: {
                textStyle: {
                    color: 'auto'
                }
            }
        },
        textStyle: {
            fontFamily: 'Arial, Verdana, sans-serif'
        }
    };


    var echartDonut = echarts.init(document.getElementById('echart_donut'), theme);

    echartDonut.setOption({
        tooltip: {
            trigger: 'item',
            formatter: "{a} <br/>{b} : {c} ({d}%)"
        },
        calculable: true,
        legend: {
            x: 'center',
            y: 'bottom',
            data: ['Recovered', 'Dues']
        },
        toolbox: {
            show: true,
            feature: {
                magicType: {
                    show: true,
                    type: ['pie', 'funnel'],
                    option: {
                        funnel: {
                            x: '25%',
                            width: '50%',
                            funnelAlign: 'center',
                            max: 1548
                        }
                    }
                },

                saveAsImage: {
                    show: true,
                    title: "Save Image"
                }
            }
        },
        series: [{
            name: 'School Fees Recovery Status',
            type: 'pie',
            radius: ['35%', '55%'],
            itemStyle: {
                normal: {
                    label: {
                        show: true
                    },
                    labelLine: {
                        show: true
                    }
                },
                emphasis: {
                    label: {
                        show: true,
                        position: 'center',
                        textStyle: {
                            fontSize: '14',
                            fontWeight: 'normal'
                        }
                    }
                }
            },
            data: [{
                value: @Model.total_recovered,
                name: 'Recovered'
            }, {
                value: @Model.total_dues,
                name: 'Dues'
            }]
        }]
    });

</script>


<script>
    var theme = {
        color: [
            '#26B99A', '#34495E', '#BDC3C7', '#3498DB',
            '#9B59B6', '#8abb6f', '#759c6a', '#bfd3b7'
        ],

        title: {
            itemGap: 8,
            textStyle: {
                fontWeight: 'normal',
                color: '#408829'
            }
        },

        dataRange: {
            color: ['#1f610a', '#97b58d']
        },

        toolbox: {
            color: ['#408829', '#408829', '#408829', '#408829']
        },

        tooltip: {
            backgroundColor: 'rgba(0,0,0,0.5)',
            axisPointer: {
                type: 'line',
                lineStyle: {
                    color: '#408829',
                    type: 'dashed'
                },
                crossStyle: {
                    color: '#408829'
                },
                shadowStyle: {
                    color: 'rgba(200,200,200,0.3)'
                }
            }
        },

        dataZoom: {
            dataBackgroundColor: '#eee',
            fillerColor: 'rgba(64,136,41,0.2)',
            handleColor: '#408829'
        },
        grid: {
            borderWidth: 0
        },

        categoryAxis: {
            axisLine: {
                lineStyle: {
                    color: '#408829'
                }
            },
            splitLine: {
                lineStyle: {
                    color: ['#eee']
                }
            }
        },

        valueAxis: {
            axisLine: {
                lineStyle: {
                    color: '#408829'
                }
            },
            splitArea: {
                show: true,
                areaStyle: {
                    color: ['rgba(250,250,250,0.1)', 'rgba(200,200,200,0.1)']
                }
            },
            splitLine: {
                lineStyle: {
                    color: ['#eee']
                }
            }
        },
        timeline: {
            lineStyle: {
                color: '#408829'
            },
            controlStyle: {
                normal: { color: '#408829' },
                emphasis: { color: '#408829' }
            }
        },

        k: {
            itemStyle: {
                normal: {
                    color: '#68a54a',
                    color0: '#a9cba2',
                    lineStyle: {
                        width: 1,
                        color: '#408829',
                        color0: '#86b379'
                    }
                }
            }
        },

        force: {
            itemStyle: {
                normal: {
                    linkStyle: {
                        strokeColor: '#408829'
                    }
                }
            }
        },
        chord: {
            padding: 4,
            itemStyle: {
                normal: {
                    lineStyle: {
                        width: 1,
                        color: 'rgba(128, 128, 128, 0.5)'
                    },
                    chordStyle: {
                        lineStyle: {
                            width: 1,
                            color: 'rgba(128, 128, 128, 0.5)'
                        }
                    }
                },
                emphasis: {
                    lineStyle: {
                        width: 1,
                        color: 'rgba(128, 128, 128, 0.5)'
                    },
                    chordStyle: {
                        lineStyle: {
                            width: 1,
                            color: 'rgba(128, 128, 128, 0.5)'
                        }
                    }
                }
            }
        },
        gauge: {
            startAngle: 225,
            endAngle: -45,
            axisLine: {
                show: true,
                lineStyle: {
                    color: [[0.2, '#86b379'], [0.8, '#68a54a'], [1, '#408829']],
                    width: 8
                }
            },
            axisTick: {
                splitNumber: 10,
                length: 12,
                lineStyle: {
                    color: 'auto'
                }
            },
            axisLabel: {
                textStyle: {
                    color: 'auto'
                }
            },
            splitLine: {
                length: 18,
                lineStyle: {
                    color: 'auto'
                }
            },
            pointer: {
                length: '90%',
                color: 'auto'
            },
            title: {
                textStyle: {
                    color: '#333'
                }
            },
            detail: {
                textStyle: {
                    color: 'auto'
                }
            }
        },
        textStyle: {
            fontFamily: 'Arial, Verdana, sans-serif'
        }
    };


    var echartDonut = echarts.init(document.getElementById('echart_donut_attendance'), theme);

    echartDonut.setOption({
        tooltip: {
            trigger: 'item',
            formatter: "{a} <br/>{b} : {c} ({d}%)"
        },
        calculable: true,
        legend: {
            x: 'center',
            y: 'bottom',
            data: ['Present', 'Absent']
        },
        toolbox: {
            show: true,
            feature: {
                magicType: {
                    show: true,
                    type: ['pie', 'funnel'],
                    option: {
                        funnel: {
                            x: '25%',
                            width: '50%',
                            funnelAlign: 'center',
                            max: 1548
                        }
                    }
                },

                saveAsImage: {
                    show: true,
                    title: "Save Image"
                }
            }
        },
        series: [{
            name: 'Daily Attendance Summary',
            type: 'pie',
            radius: ['35%', '55%'],
            itemStyle: {
                normal: {
                    label: {
                        show: true
                    },
                    labelLine: {
                        show: true
                    }
                },
                emphasis: {
                    label: {
                        show: true,
                        position: 'center',
                        textStyle: {
                            fontSize: '14',
                            fontWeight: 'normal'
                        }
                    }
                }
            },
            data: [{
                value: @Model.daily_present,
                name: 'Present'
            }, {
                value: @Model.daily_absent,
                name: 'Absent'
            }]
        }]
    });


</script>

